- name: Install Workstation Cron
  ansible.builtin.template:
    src: templates/crontab.j2
    dest: /etc/crontab
  when: cron_enabled

- name: Install Role Dependencies
  package:
    name: "{{ dep }}"
    state: present
  loop: "{{ role_deps }}"
  loop_control:
    loop_var: dep

- name: SSH Authorized Keys from Github
  ansible.posix.authorized_key:
    user: '{{ workstation_user }}'
    state: present
    key: '{{ ssh_authorized_keys_url }}'

- name: Check if aw(ansible-workstation) dir exists
  stat:
    path: "{{ aw_config_dir_path }}"
  register: stat_aw_config_dir

- name: Create aw config dir
  ansible.builtin.file:
    name: "/home/{{ workstation_user }}/.config/aw"
    state: directory
  when: not stat_aw_config_dir.stat.exists

- name: Add Hashicorp APT Key
  apt_key:
    url: https://apt.releases.hashicorp.com/gpg
    state: present

- name: Install Hashicorp Repository
  apt_repository:
    repo: "deb [arch=amd64] https://apt.releases.hashicorp.com {{ ansible_distribution_release }} main"
    state: present

- name: Install K8s Helm
  ansible.builtin.unarchive:
    src: "{{ helm_url }}"
    dest: /usr/local/bin
    extra_opts:
      - --strip=1
      - --wildcars
      - '*/helm'
    remote_src: true

- name: Check if Mirantis Lens is installed
  stat:
    path: /usr/bin/lens
  register: stat_lens

- name: Install Mirantis Lens
  apt:
    deb: "{{ mirantis_lens_url }}"
  when: not stat_lens.stat.exists

- name: Install Neovim
  apt:
    deb: "{{ neovim_url }}"

- name: Check if Mattermost is installed
  stat:
    path: /usr/bin/mattermost-desktop
  register: stat_mattermost

- name: Install Mattermost
  apt:
    deb: "{{ mattermost_url }}"
  when: not stat_mattermost.stat.exists

- name: Install Vultr CLI
  ansible.builtin.unarchive:
    src: "{{ vultr_cli_url }}"
    dest: /usr/local/bin
    remote_src: yes

- name: Add Custom Scripts and Bins
  ansible.builtin.copy:
    src: files/bin/
    dest: /usr/local/bin
    mode: '0755'

- name: Create Hermit Font Directory
  ansible.builtin.file:
    name: /usr/share/fonts/opentype/hermit/
    state: directory

- name: Install Hermit Font
  ansible.builtin.unarchive:
    src: https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/Hermit.zip
    dest: /usr/share/fonts/opentype/hermit/
    remote_src: yes

- name: Neovim configs 
  ansible.builtin.copy:
    src: files/config/nvim
    dest: /home/{{ workstation_user }}/.config
    owner: "{{ workstation_user }}"
    group: "{{ workstation_user }}"
    backup: true

- name: Check if Doom is Cloned
  stat:
    path: "/home/{{ workstation_user }}/.emacs.d"
  register: stat_doom_emacs

- name: Install DoomEmacs
  ansible.builtin.git:
    repo: https://github.com/doomemacs/doomemacs
    dest: "/home/{{ workstation_user }}/.emacs.d"
    depth: 1
  become: yes
  become_user: "{{ workstation_user }}"
  when: not stat_doom_emacs.stat.exists

- name: Install Packages
  package:
    name: "{{ item }}"
    state: present
  with_items: "{{ packages }}"

- name: Install NPM Packages
  community.general.npm:
    name: "{{ npm_package }}"
    global: yes
    state: present
  loop: "{{ npm_packages }}"
  loop_control:
    loop_var: npm_package

- name: Set Workstation User shell
  ansible.builtin.user:
    name: "{{ workstation_user }}"
    shell: "{{ workstation_user_shell }}"
